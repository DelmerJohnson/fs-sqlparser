%{   
//module SqlParser
open Sql   
%}   
 
%token <string> ID   
%token <string> INT   
%token <string> FLOAT   

%token AND OR LPAREN RPAREN  
%token COMMA DOT  
%token EQ LT LE GT GE   
%token JOIN INNER LEFT RIGHT ON   
%token SELECT FROM WHERE ORDER BY   
%token AS DBO TOP PERCENT
%token ASC DESC   
%token EOF   
 
// start   
%start start   
%type <Sql.sqlStatement> start   
 
%%   
 


start:  SELECT topn valueList   
        FROM aliasableTable   
        joinList   
        whereClause   
        orderByClause   
        EOF                 {   
                                { TopN = $2; 
                                  Table1 = $5; 
                                  Columns = $3;   
                                  Joins = $6;   
                                  Where = $7;   
                                  OrderBy = $8 }   
                            }   

topn:
	|										{ None }
	| TOP INT								{ Some(Top($2)) }
	| TOP INT PERCENT						{ Some(TopPercent($2)) } 


// join clause   
joinList:   
    |										{ [] }   
    | joinClause							{ [$1] }   
    | joinClause joinList					{ $1 :: $2 }       
 
joinClause:   
    | INNER JOIN aliasableTable joinOnClause			{ Join($3, Inner, $4) }   
    | LEFT JOIN aliasableTable joinOnClause				{ Join($3, Left, $4) }   
    | RIGHT JOIN aliasableTable joinOnClause			{ Join($3, Right, $4) }   
 

 
aliasableTable:
	| table									{ $1 }
	| table AS ID							{ AliassedTable($1, Alias($3)) }

joinOnClause:   
    |										{ None }   
    | ON conditionList						{ Some($2) }   
 
conditionList:   
    | value op value						{ WhereCond(Comp(CondValue($1), $2, CondValue($3))) }   
    | value op value AND conditionList		{ WhereCond(And(WhereCond(Comp(CondValue($1), $2, CondValue($3))),$5)) }   
    | value op value OR conditionList		{ WhereCond(Or(WhereCond(Comp(CondValue($1), $2, CondValue($3))),$5)) }   
 
// where clause   
whereClause:   
    |										{ None }   
    | WHERE conditionList					{ Some($2) }   
 
op: EQ { Eq } | LT { Lt } | LE { Le } | GT { Gt } | GE { Ge }   

table: 
	| ID									{ Table(None, $1) }
	| ID DOT ID								{ Table(Some(Schema($1)), $3) }

value:   
	| value AS ID							{ AliassedValue($1, $3) }
    | INT									{ Int($1) }   
    | FLOAT									{ Float($1) }
	| ID LPAREN valueList RPAREN			{ Function(None, FunctionName($1), $3)}  
	| ID DOT ID LPAREN valueList RPAREN		{ Function(Some(Schema($1)), FunctionName($3), $5)}
//Somehow I couldn't make it work by referencing table and had to write it all out to get it to work
    | ID DOT ID DOT ID						{ TableField(Table(Some(Schema($1)), $3),Field($5)) }
	| ID DOT ID								{ TableField(Table(None, $1),Field($3)) }
	| ID									{ Field($1) }   

valueList:
	|										{ [] }   
    | value									{ [$1] }   
    | value COMMA valueList					{ $1 :: $3 }        

// order by clause   
orderByClause:   
    |								        { [] }   
    | ORDER BY orderByList			        { $3 }   
 
orderByList:   
    | orderBy								{ [$1] }   
    | orderBy COMMA orderByList				{ $1 :: $3 }   
 
orderBy:   
    | value									{ Order($1, None) }   
    | value ASC								{ Order($1, Some(Asc)) }   
    | value DESC							{ Order($1, Some(Desc)) }   
 
%%
